@startuml
'https://plantuml.com/class-diagram

' Main package
package "code" {
    ' media package
    package "media" {
        abstract class AudioPlayer {
            # basePath : String
            # filename : String
            # player : Player
            # buffer : BufferedInputStream
            # position : long
            # isPlaying : boolean
            # length : long
            + play(filename : String) : void
            + pause()
            + resume()
            + isPlaying() : boolean
            + getLength() : long
            }
        class MusicPlayer extends AudioPlayer {
            # files : File[]
            +play()
            # getFiles() : File[]
            }

        enum SFX {
            BlockShow("blockShow.mp3")
            BlockHide("blockHide.mp3")
            SnakeEat("snakeEat.mp3")
            SnakeCollided("snakeCollided.mp3")
            Win("win.mp3")
            Lose("Lose.mp3")
            ButtonClick("buttonClick.mp3")

            - fileName : String
            - SFX(fileName)
            + getFileName() : String
        }

        class SfxPlayer extends AudioPlayer {
            + play(sfx)
        }

        ' Relation between classes in the same package
        SfxPlayer *-- SFX

    }

    ' Controllers package
    package "controllers" {
        class KeyInput extends KeyAdapter {
            - gamePanel : GamePanel
            - snake : Snake

            + KeyInput(gamePanel : GamePanel, snake : Snake)
            + keyPressed(e : KeyEvent) : void
        }
    }

    ' Enums package
    package "enums" {
        enum Directions {
            Up
            Down
            Left
            Right
        }
    }

    ' Game components package
    package "gameComponents" {
        class Apple {
            - y : int
            - x : int
            - rand : Random
            - color : Color

            + Apple(Color)
            + generateApple() : void
            + getColor() : Color
            + getX() : int
            + getY() : int
        }

        class Snake {
            - length : int
            - x : int[]
            - y : int[]
            - score : int
            - highScore : int
            - direction : Directions
            - headColor : Color
            - bodyColor : Color
            - paused : boolean
            - soundPlayed : boolean

            + Snake(Color)
            + move() : void
            + addUnit() : void
            + checkCollision() : void
            + pause() : void
            + unPause() : void
            + reset() : void
            + setHeadColor(color : Color) : void
            + setBodyColor(color : Color) : void
            + getHeadColor() : Color
            + getBodyColor() : Color
            + setLength(length : int) : void
            + getLength() : int
            + setScore(score : int) : void
            + getScore() : int
            + setHighScore(int highScore) : void
            + getHighScore() : int
            + setX(x : int[]) : void
            + getX() : int[]
            + setY(y : int[]) : void
            + getY() : int[]
            + setDirection(direction : Directions) : void
            + getDirection() : Directions
            + isPaused() : boolean
        }

        Snake *-- Directions
        Snake -- Apple
        Snake -- KeyInput
        Snake -- SfxPlayer

    }

    ' Screens package
    package "screens" {
        class GameOverScreen {
            - gamePanel : GamePanel
            - score : int
            - highScore : int
            - newHighScore : boolean
            - lives : int
            - level : int
            - highScore : int

            + GameOverScreen(gamePanel : GamePanel, snake : Snake)
            + draw(g : Graphics) : void
        }
    }

    class Window extends JFrame {
        + Window()
    }

    class Game {
        + sfxPlayer : SfxPlayer
        + musicPlayer : MusicPlayer

        + main() : void
    }

    ' Game panel class
        class GamePanel extends JPanel implements ActionListener {
             +  WIDTH : int
             + HEIGHT : int
             +  UNIT_SIZE : int
             +  GAME_UNITS : int
             +  DELAY : int
             + gameStart : boolean
             + gameOver : boolean
             + magickColorForSnick : boolean
             + magickColorForApple : boolean
             - snake : Snake
             - apple : Apple
             - timer : Timer

             + GamePanel()
             + paintComponent(g : Graphics) : void
             + draw(g : Graphics) : void
             + actionPerformed(e : ActionEvent) : void
             - init() : void
             + reset() : void
             + startGame() : void
             + checkApple() : void
             + drawGameMatrix(g : Graphics) : void
        }

          GameOverScreen *-- Snake
          GameOverScreen --* GamePanel

          GamePanel *-- Snake
          GamePanel *-- Apple

          KeyInput *-- Snake
          KeyInput *-- GamePanel

    Window --* Game

    Game *-- GamePanel
    Game *-- MusicPlayer
    Game *-- SfxPlayer

    AudioPlayer *-- Player

}

@enduml